# OneDrive File and Folder Downloader (Python)

There doesn't seem to be an easy way to download, say, all the photos or videos uploaded to OneDrive in a single go. You typically have to select them week by week or folder by folder. 

Have you ever wanted to programmatically download files from your OneDrive account via Python? This code will give you a head-start. It's literally just a few hours of coding, so don't expect it to catch all the edge-cases; this is merely some jumpstart code which was able to download about 5,500+ files for me just fine, and I'm publishing in hopes that it saves you time in what you want to build. Feel free to do submit pull requests with improvements.

## Basic components

| Filename                  | Role                                                                                                                                               |
| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| start.py                  | The loader application; the command-line interface.                                                                                                |
| onedrive_authorization.py | Various ways to get the access_token and refresh_token for the Microsoft opengraph                                                                 |
| generate_list.py          | Code to generate the list of files and folders, to walk the OneDrive folder tree basically                                                         |
| download_list.py          | Once the file_list.json file is generated, this walks through that file and downloads the items, preserving the file structure as seen on OneDrive |

# Getting Started

```bash
git clone https://github.com/stevemurch/onedrive-download
cd onedrive-download

// Next, install the requirements.
// If any of them fail, follow their respective documentation
// NOTE: This project was built with Python v3.11 

pip install -r requirements.txt

// Now, to Authorize yourself to modify your OneDrive files, you 
// need to create an "App Registration" on the Azure Portal. 
// Create your Azure app via the portal; search for "app registration"
// Choose a consumer app. Be sure to give your Azure app 
// Files.ReadWriteAll permissions

// Then, once you've got your app created, go find and set the following
// two critical ENVIRONMENT VARIABLES:

export MS_OPENGRAPH_APP_ID=your-app-id
export MS_OPENGRAPH_CLIENT_SECRET=your-client-secret

// substituting in your own app id and client secret where shown above

// Then, to start the CLI, just run:

python start.py

// You'll want to choose Option 1 first, which will create your 
// access_token and refresh_tokens. 

// Note that access_tokens only last an hour. After that, all fetches to 
// the MS OpenGraph API will get rejected. I have not yet done the work to 
// automatically generate a new access_token when one is expired. I'm generally
// assuming you're running steps 1, 3 and 4 in succession, within 60 minutes,
// before that clock is up. Feel free to enhance this quick and dirty utility
// to handle this situation more gracefully. 

// Also, sometimes during large file downloads (e.g., videos), you might 
// get an error. The downloads will simply log that error to a file and move 
// on to the next one on the list. I've used this to download about 5,560 files
// and got maybe 6 errors of large videos, easy enough to 
// handle manually later. 
```

This Python utility uses the Microsoft Opengraph API's to traverse the OneDrive folders and download files. The sample code included here begins at `start.py` and includes these basic options:

<img width="1226" alt="image" src="https://user-images.githubusercontent.com/9558478/210688866-4023e131-0d46-41a2-a981-49ca4768f7c8.png">

| Option | What it does                                                                                                                                                                                  |
| ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 1      | Generate access_token and refresh_token and save locally.                                                                                                                                     |
| 2      | Using a refresh_token, generate a new access_token                                                                                                                                            |
| 3      | Traverse the folder tree and make a list of folders and files. Two .json files, one containing a list of folders, and another containing a list of files, are saved to your local hard drive. |
| 4      | Walk through the list of files and fetch them one by one, and save to local disk.                                                                                                             |

This is working on a local machine, but does include one hardcoded path to my own "P/Pictures" folder. You'll want to double-check the root path.

## Prerequisites

Written in Python 3.11. Some of the included libraries require 3.1 or above; this will not work in Python 2.x.

The app looks for two key environment variables:

`MS_OPENGRAPH_APP_ID` and

`MS_OPENGRAPH_CLIENT_SECRET`

To generate these, go to the Azure Portal, and type in "app registrations". Create a new app registration, and new client secrets for them. Save these values to your local environment variables.
